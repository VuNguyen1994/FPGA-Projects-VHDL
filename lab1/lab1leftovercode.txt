-------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity new_cascade_reg is
--  Port ( );
Port (x: in std_logic_vector(3 downto 0);
    z1: out std_logic_vector (3 downto 0);
    z2: out std_logic_vector (3 downto 0);
    ck, btn0, btn1 : in std_logic);
end new_cascade_reg;

architecture Beh of new_cascade_reg is
signal en: std_logic;
signal temp1, temp2: std_logic_vector(3 downto 0);
begin
process(ck)
type db_state is (not_rdy, rdy, pulse);
variable db_ns:db_state;
begin
if ck ='1' and ck'event then
    case db_ns is
    when not_rdy =>en<='0';
    if btn1='1' then db_ns:=rdy; end if;
    when rdy=>en<= '0';
    if btn0 ='1' then db_ns:=pulse; end if;
    when pulse =>en<='1';
    db_ns:= not_rdy;
    when others => null;
    end case;
end if;
end process;
process(en)
begin
if en='1' and en'event then
temp1<=x; temp2<=temp1;
end if;
end process;
z1<=temp1; z2<=temp2;
end Beh;
------------------------------------------------------------------------
--6.0----
---------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity cascade_reg4 is
--  Port ( );
Port (x: in std_logic_vector(3 downto 0);
    z1: out std_logic_vector (3 downto 0);
    z2: out std_logic_vector (3 downto 0);
    ck, en, btn0, btn1 : in std_logic);
end cascade_reg4;

architecture struc of cascade_reg4 is
component reg
generic (n: natural);
Port (ck, ld_en: in std_logic;
    x: in std_logic_vector(n-1 downto 0);
    z: out std_logic_vector(n-1 downto 0));
end component;   
signal w: std_logic_vector (3 downto 0);

begin
R1 : reg generic map (4)
    port map (x =>x, z => w, ck => ck, ld_en=> en);
R2 : reg generic map (4)
    port map (x =>w, z => z2, ck => ck, ld_en=> en);
z1<=w; --wire w to output port
end struc;